
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jul 09 14:30:46 CEST 2025
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jul 09 14:30:46 CEST 2025
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\047\002\000\002\002" +
    "\004\000\002\003\005\000\002\004\005\000\002\006\006" +
    "\000\002\005\006\000\002\007\004\000\002\007\002\000" +
    "\002\042\007\000\002\042\006\000\002\042\007\000\002" +
    "\042\006\000\002\010\004\000\002\010\002\000\002\043" +
    "\013\000\002\043\012\000\002\046\003\000\002\046\003" +
    "\000\002\011\004\000\002\011\002\000\002\044\007\000" +
    "\002\044\006\000\002\041\005\000\002\041\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\002\000\002\030" +
    "\016\000\002\031\020\000\002\033\007\000\002\033\005" +
    "\000\002\033\002\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\035\003\000\002\035\003\000\002" +
    "\032\006\000\002\032\005\000\002\034\003\000\002\034" +
    "\005\000\002\013\004\000\002\013\002\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\022\005\000\002\021\003\000\002\021\003\000\002" +
    "\023\012\000\002\023\015\000\002\023\015\000\002\023" +
    "\020\000\002\023\004\000\002\024\010\000\002\024\012" +
    "\000\002\024\013\000\002\026\010\000\002\027\006\000" +
    "\002\027\006\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\014" +
    "\003\000\002\014\005\000\002\014\005\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\016\003\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\017" +
    "\003\000\002\017\003\000\002\017\005\000\002\017\003" +
    "\000\002\037\003\000\002\037\003\000\002\020\004\000" +
    "\002\020\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\004\021\000\001\002\000\004\002\310\001" +
    "\002\000\004\021\010\001\002\000\004\002\uffff\001\002" +
    "\000\016\004\ufff9\006\013\012\ufff9\020\ufff9\026\ufff9\030" +
    "\ufff9\001\002\000\004\054\011\001\002\000\004\052\012" +
    "\001\002\000\016\004\ufffd\006\ufffd\012\ufffd\020\ufffd\026" +
    "\ufffd\030\ufffd\001\002\000\004\054\300\001\002\000\004" +
    "\004\273\001\002\000\014\004\ufff3\012\ufff3\020\ufff3\026" +
    "\017\030\ufff3\001\002\000\012\004\uffed\012\uffed\020\uffed" +
    "\030\034\001\002\000\004\054\020\001\002\000\004\042" +
    "\022\001\002\000\012\004\ufff4\012\ufff4\020\ufff4\030\ufff4" +
    "\001\002\000\004\023\023\001\002\000\004\016\024\001" +
    "\002\000\006\032\027\054\025\001\002\000\006\050\uffef" +
    "\052\uffef\001\002\000\004\050\030\001\002\000\006\050" +
    "\ufff0\052\ufff0\001\002\000\006\032\027\054\025\001\002" +
    "\000\004\052\032\001\002\000\014\004\ufff1\012\ufff1\020" +
    "\ufff1\030\ufff1\054\020\001\002\000\012\004\ufff2\012\ufff2" +
    "\020\ufff2\030\ufff2\001\002\000\004\054\045\001\002\000" +
    "\010\004\uffe6\012\041\020\040\001\002\000\004\004\ufffc" +
    "\001\002\000\004\004\uffe7\001\002\000\004\054\251\001" +
    "\002\000\004\054\043\001\002\000\004\004\uffe8\001\002" +
    "\000\004\043\044\001\002\000\006\044\uffe1\054\045\001" +
    "\002\000\006\047\247\053\uffe9\001\002\000\004\044\057" +
    "\001\002\000\004\053\050\001\002\000\010\005\054\015" +
    "\051\054\052\001\002\000\006\044\uffe0\052\uffe0\001\002" +
    "\000\006\044\uffde\052\uffde\001\002\000\006\044\uffe2\052" +
    "\055\001\002\000\006\044\uffdf\052\uffdf\001\002\000\006" +
    "\044\uffe1\054\045\001\002\000\004\044\uffe3\001\002\000" +
    "\004\053\060\001\002\000\010\005\054\015\051\054\052" +
    "\001\002\000\004\052\062\001\002\000\016\004\ufff9\006" +
    "\013\012\ufff9\020\ufff9\026\ufff9\030\ufff9\001\002\000\004" +
    "\004\064\001\002\000\014\010\uffd6\013\075\022\065\031" +
    "\100\054\077\001\002\000\014\013\075\022\065\027\uffd6" +
    "\031\100\054\077\001\002\000\004\052\uffd3\001\002\000" +
    "\016\010\uffcf\013\uffcf\022\uffcf\027\uffcf\031\uffcf\054\uffcf" +
    "\001\002\000\004\052\uffd2\001\002\000\016\010\uffd6\013" +
    "\075\022\065\027\uffd6\031\100\054\077\001\002\000\004" +
    "\052\240\001\002\000\004\052\uffd5\001\002\000\016\010" +
    "\uffd0\013\uffd0\022\uffd0\027\uffd0\031\uffd0\054\uffd0\001\002" +
    "\000\004\043\176\001\002\000\004\052\uffd4\001\002\000" +
    "\006\041\174\043\131\001\002\000\004\043\105\001\002" +
    "\000\004\010\102\001\002\000\004\052\103\001\002\000" +
    "\010\004\uffe6\012\041\020\040\001\002\000\004\004\uffe4" +
    "\001\002\000\020\011\115\025\112\032\106\033\114\043" +
    "\124\045\123\054\120\001\002\000\032\014\uffbe\017\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\044\uffbe\046" +
    "\uffbe\047\uffbe\050\uffbe\052\uffbe\001\002\000\024\014\uffbb" +
    "\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\044\uffc3\047" +
    "\uffc3\052\uffc3\001\002\000\012\017\uffb1\044\uffc2\047\uffc2" +
    "\052\uffc2\001\002\000\012\017\uffb5\044\uffb5\047\uffb5\052" +
    "\uffb5\001\002\000\012\017\uffdd\044\uffdd\047\uffdd\052\uffdd" +
    "\001\002\000\016\014\166\034\152\035\153\036\151\037" +
    "\167\040\171\001\002\000\004\044\165\001\002\000\012" +
    "\017\uffdc\044\uffdc\047\uffdc\052\uffdc\001\002\000\004\044" +
    "\164\001\002\000\026\014\uffba\017\uffb0\034\uffba\035\uffba" +
    "\036\uffba\037\uffba\040\uffba\044\uffc0\047\uffc0\052\uffc0\001" +
    "\002\000\030\014\uffb9\017\uffae\034\uffb9\035\uffb9\036\uffb9" +
    "\037\uffb9\040\uffb9\043\131\044\uffbf\047\uffbf\052\uffbf\001" +
    "\002\000\004\017\161\001\002\000\010\044\uffc1\047\uffc1" +
    "\052\uffc1\001\002\000\012\032\106\043\147\046\144\054" +
    "\142\001\002\000\014\011\115\025\112\032\106\043\124" +
    "\054\130\001\002\000\020\014\uffbb\034\uffbb\035\uffbb\036" +
    "\uffbb\037\uffbb\040\uffbb\044\141\001\002\000\006\017\uffb1" +
    "\044\140\001\002\000\026\014\uffba\017\uffb0\034\uffba\035" +
    "\uffba\036\uffba\037\uffba\040\uffba\044\uffb0\047\uffb0\052\uffb0" +
    "\001\002\000\030\014\uffb9\017\uffae\034\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\043\131\044\uffae\047\uffae\052\uffae" +
    "\001\002\000\020\011\115\025\112\032\106\043\124\044" +
    "\134\045\123\054\120\001\002\000\004\044\137\001\002" +
    "\000\006\044\uffd9\047\135\001\002\000\032\014\uffda\017" +
    "\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\044\uffda" +
    "\046\uffda\047\uffda\050\uffda\052\uffda\001\002\000\016\011" +
    "\115\025\112\032\106\043\124\045\123\054\120\001\002" +
    "\000\004\044\uffd8\001\002\000\032\014\uffdb\017\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\044\uffdb\046\uffdb" +
    "\047\uffdb\050\uffdb\052\uffdb\001\002\000\012\017\uffb3\044" +
    "\uffb3\047\uffb3\052\uffb3\001\002\000\032\014\uffbd\017\uffbd" +
    "\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\044\uffbd\046" +
    "\uffbd\047\uffbd\050\uffbd\052\uffbd\001\002\000\034\014\uffb9" +
    "\017\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\043" +
    "\131\044\uffb9\046\uffb9\047\uffb9\050\uffb9\052\uffb9\001\002" +
    "\000\032\014\uffba\017\uffba\034\uffba\035\uffba\036\uffba\037" +
    "\uffba\040\uffba\044\uffba\046\uffba\047\uffba\050\uffba\052\uffba" +
    "\001\002\000\010\044\uffab\047\uffab\052\uffab\001\002\000" +
    "\032\014\uffbb\017\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb" +
    "\040\uffbb\044\uffbb\046\uffbb\047\uffbb\050\uffbb\052\uffbb\001" +
    "\002\000\012\034\152\035\153\036\151\050\156\001\002" +
    "\000\010\032\106\043\147\054\142\001\002\000\010\034" +
    "\152\035\153\036\151\001\002\000\010\032\uffb6\043\uffb6" +
    "\054\uffb6\001\002\000\010\032\uffb8\043\uffb8\054\uffb8\001" +
    "\002\000\010\032\uffb7\043\uffb7\054\uffb7\001\002\000\010" +
    "\032\106\043\147\054\142\001\002\000\032\014\uffbc\017" +
    "\uffbc\034\152\035\153\036\151\037\uffbc\040\uffbc\044\uffbc" +
    "\046\uffbc\047\uffbc\050\uffbc\052\uffbc\001\002\000\010\032" +
    "\106\043\147\054\142\001\002\000\012\034\152\035\153" +
    "\036\151\046\160\001\002\000\010\044\uffaa\047\uffaa\052" +
    "\uffaa\001\002\000\014\011\115\025\112\032\106\043\124" +
    "\054\130\001\002\000\012\017\uffb1\044\uffb1\047\uffb1\052" +
    "\uffb1\001\002\000\012\017\uffb4\044\uffb4\047\uffb4\052\uffb4" +
    "\001\002\000\004\052\uffc4\001\002\000\004\052\uffc5\001" +
    "\002\000\004\054\173\001\002\000\010\032\uffad\043\uffad" +
    "\054\uffad\001\002\000\010\032\106\043\147\054\142\001" +
    "\002\000\010\032\uffac\043\uffac\054\uffac\001\002\000\020" +
    "\017\uffb2\034\152\035\153\036\151\044\uffb2\047\uffb2\052" +
    "\uffb2\001\002\000\012\017\uffaf\044\uffaf\047\uffaf\052\uffaf" +
    "\001\002\000\016\011\115\025\112\032\106\043\124\045" +
    "\123\054\120\001\002\000\004\052\uffd1\001\002\000\014" +
    "\011\115\025\112\032\106\043\124\054\130\001\002\000" +
    "\006\017\161\044\200\001\002\000\004\024\201\001\002" +
    "\000\014\004\204\013\075\022\065\031\100\054\077\001" +
    "\002\000\016\010\uffc9\013\uffc9\022\uffc9\027\uffc9\031\uffc9" +
    "\054\uffc9\001\002\000\020\007\236\010\uffd0\013\uffd0\022" +
    "\uffd0\027\uffd0\031\uffd0\054\uffd0\001\002\000\014\010\uffd6" +
    "\013\075\022\065\031\100\054\077\001\002\000\004\010" +
    "\206\001\002\000\004\052\207\001\002\000\020\007\210" +
    "\010\uffc7\013\uffc7\022\uffc7\027\uffc7\031\uffc7\054\uffc7\001" +
    "\002\000\014\004\213\013\211\022\065\031\100\054\077" +
    "\001\002\000\004\043\217\001\002\000\020\007\uffcd\010" +
    "\uffcd\013\uffcd\022\uffcd\027\uffcd\031\uffcd\054\uffcd\001\002" +
    "\000\014\010\uffd6\013\075\022\065\031\100\054\077\001" +
    "\002\000\004\010\215\001\002\000\004\052\216\001\002" +
    "\000\020\007\uffcb\010\uffcb\013\uffcb\022\uffcb\027\uffcb\031" +
    "\uffcb\054\uffcb\001\002\000\014\011\115\025\112\032\106" +
    "\043\124\054\130\001\002\000\006\017\161\044\221\001" +
    "\002\000\004\024\222\001\002\000\014\004\224\013\211" +
    "\022\065\031\100\054\077\001\002\000\004\007\230\001" +
    "\002\000\014\010\uffd6\013\075\022\065\031\100\054\077" +
    "\001\002\000\004\010\226\001\002\000\004\052\227\001" +
    "\002\000\004\007\210\001\002\000\014\004\232\013\211" +
    "\022\065\031\100\054\077\001\002\000\020\007\uffce\010" +
    "\uffce\013\uffce\022\uffce\027\uffce\031\uffce\054\uffce\001\002" +
    "\000\014\010\uffd6\013\075\022\065\031\100\054\077\001" +
    "\002\000\004\010\234\001\002\000\004\052\235\001\002" +
    "\000\020\007\uffcc\010\uffcc\013\uffcc\022\uffcc\027\uffcc\031" +
    "\uffcc\054\uffcc\001\002\000\014\004\232\013\075\022\065" +
    "\031\100\054\077\001\002\000\016\010\uffc8\013\uffc8\022" +
    "\uffc8\027\uffc8\031\uffc8\054\uffc8\001\002\000\020\007\uffca" +
    "\010\uffca\013\uffca\022\uffca\027\uffca\031\uffca\054\uffca\001" +
    "\002\000\006\010\uffd7\027\uffd7\001\002\000\004\027\243" +
    "\001\002\000\004\043\244\001\002\000\014\011\115\025" +
    "\112\032\106\043\124\054\130\001\002\000\006\017\161" +
    "\044\246\001\002\000\004\052\uffc6\001\002\000\004\054" +
    "\045\001\002\000\004\053\uffea\001\002\000\004\043\252" +
    "\001\002\000\006\044\uffe1\054\045\001\002\000\004\044" +
    "\254\001\002\000\004\052\255\001\002\000\016\004\ufff9" +
    "\006\013\012\ufff9\020\ufff9\026\ufff9\030\ufff9\001\002\000" +
    "\004\004\257\001\002\000\014\010\uffd6\013\075\022\065" +
    "\031\100\054\077\001\002\000\004\010\261\001\002\000" +
    "\004\052\262\001\002\000\010\004\uffe6\012\041\020\040" +
    "\001\002\000\004\004\uffe5\001\002\000\004\053\266\001" +
    "\002\000\010\004\uffee\012\uffee\020\uffee\001\002\000\010" +
    "\005\054\015\051\054\052\001\002\000\004\052\270\001" +
    "\002\000\012\004\uffeb\012\uffeb\020\uffeb\054\045\001\002" +
    "\000\010\004\uffec\012\uffec\020\uffec\001\002\000\004\002" +
    "\ufffe\001\002\000\014\010\uffd6\013\075\022\065\031\100" +
    "\054\077\001\002\000\004\010\275\001\002\000\004\051" +
    "\276\001\002\000\004\002\ufffb\001\002\000\014\004\ufffa" +
    "\012\ufffa\020\ufffa\026\ufffa\030\ufffa\001\002\000\004\042" +
    "\301\001\002\000\010\011\115\025\112\032\303\001\002" +
    "\000\004\052\306\001\002\000\004\052\304\001\002\000" +
    "\016\004\ufff5\012\ufff5\020\ufff5\026\ufff5\030\ufff5\054\300" +
    "\001\002\000\014\004\ufff6\012\ufff6\020\ufff6\026\ufff6\030" +
    "\ufff6\001\002\000\016\004\ufff7\012\ufff7\020\ufff7\026\ufff7" +
    "\030\ufff7\054\300\001\002\000\014\004\ufff8\012\ufff8\020" +
    "\ufff8\026\ufff8\030\ufff8\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\006\002\003\047\004\001\001\000\002\001" +
    "\001\000\006\003\005\004\006\001\001\000\002\001\001" +
    "\000\006\006\013\007\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\276\001\001" +
    "\000\004\005\271\001\001\000\004\010\015\001\001\000" +
    "\004\011\034\001\001\000\004\043\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\030\001\001\000" +
    "\002\001\001\000\004\043\032\001\001\000\002\001\001" +
    "\000\006\041\263\044\264\001\001\000\010\012\035\030" +
    "\041\031\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\033\045\041\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\055\041\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\060" +
    "\001\001\000\002\001\001\000\006\006\062\007\014\001" +
    "\001\000\002\001\001\000\024\013\100\021\070\022\072" +
    "\023\073\024\066\025\071\026\065\027\067\032\075\001" +
    "\001\000\024\013\241\021\070\022\072\023\073\024\066" +
    "\025\071\026\065\027\067\032\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\013\240" +
    "\021\070\022\072\023\073\024\066\025\071\026\065\027" +
    "\067\032\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\103\030\041\031\036\001\001\000" +
    "\002\001\001\000\022\014\106\015\112\016\107\017\120" +
    "\020\121\032\116\035\110\045\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\037\167\040\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\014\144\015\145\032\142\001\001\000\016" +
    "\014\124\015\112\016\125\017\120\032\126\035\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\014\106\015\112\016\107\017" +
    "\120\020\121\032\116\034\131\035\110\045\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\014\106\015\112\016\107\017\120\020\121\032\116" +
    "\034\135\035\110\045\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\153\001\001\000\010\014\124\015\147" +
    "\032\142\001\001\000\004\040\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\014\144" +
    "\015\154\032\142\001\001\000\004\040\153\001\001\000" +
    "\010\014\144\015\156\032\142\001\001\000\004\040\153" +
    "\001\001\000\002\001\001\000\016\014\144\015\112\016" +
    "\161\017\162\032\126\035\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\144\015\171" +
    "\032\142\001\001\000\002\001\001\000\004\040\153\001" +
    "\001\000\002\001\001\000\022\014\106\015\112\016\107" +
    "\017\120\020\121\032\116\035\110\045\174\001\001\000" +
    "\002\001\001\000\016\014\144\015\112\016\161\017\176" +
    "\032\126\035\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\021\201\022\072\023\202\024\066\025\071" +
    "\026\065\027\067\032\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\013\204\021\070\022\072\023\073" +
    "\024\066\025\071\026\065\027\067\032\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\022\072\023\211\025\071\026\065\027\067\032\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\013\213" +
    "\021\070\022\072\023\073\024\066\025\071\026\065\027" +
    "\067\032\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\014\144\015\112\016\161\017" +
    "\217\032\126\035\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\022\072\023\222\025\071\026\065\027" +
    "\067\032\075\001\001\000\002\001\001\000\024\013\224" +
    "\021\070\022\072\023\073\024\066\025\071\026\065\027" +
    "\067\032\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\022\072\023\230\025\071\026" +
    "\065\027\067\032\075\001\001\000\002\001\001\000\024" +
    "\013\232\021\070\022\072\023\073\024\066\025\071\026" +
    "\065\027\067\032\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\022\072\023\230\024" +
    "\236\025\071\026\065\027\067\032\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\014\144\015\112\016\161" +
    "\017\244\032\126\035\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\247\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\252\041\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\255\007\014" +
    "\001\001\000\002\001\001\000\024\013\257\021\070\022" +
    "\072\023\073\024\066\025\071\026\065\027\067\032\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\262\030\041\031\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\266\001\001\000" +
    "\002\001\001\000\006\041\263\044\270\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\013\273\021\070\022" +
    "\072\023\073\024\066\025\071\026\065\027\067\032\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\301" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\304\001\001\000\002\001\001\000\004\042\306\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // set_exp ::= LBRACK full_arith_exp DOTDOT full_arith_exp RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_exp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // set_exp ::= LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_exp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // comp_op ::= NE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_op",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // comp_op ::= GT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_op",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // full_bool_exp ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("full_bool_exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // full_bool_exp ::= full_arith_exp IN ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("full_bool_exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // full_bool_exp ::= fun_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("full_bool_exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // full_bool_exp ::= bool_exp_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("full_bool_exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // bool_exp_part ::= full_arith_exp comp_op full_arith_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp_part",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // bool_exp_part ::= LPAREN bool_exp_part RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp_part",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // bool_exp_part ::= full_bool_exp OR full_bool_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp_part",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // bool_exp_part ::= bool_lit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp_part",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // op ::= STAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // op ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // op ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // full_arith_exp ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("full_arith_exp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // full_arith_exp ::= fun_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("full_arith_exp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // full_arith_exp ::= arith_exp_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("full_arith_exp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arith_exp_part ::= full_arith_exp op full_arith_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_exp_part",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arith_exp_part ::= LPAREN arith_exp_part RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_exp_part",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // arith_exp_part ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_exp_part",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= fun_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= set_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= bool_exp_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= arith_exp_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // write_stmt ::= WRITE LPAREN expresion RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // write_stmt ::= WRITE LPAREN STRING RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // repeat_stmt ::= REPEAT stmt_list UNTIL LPAREN full_bool_exp RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // poorly_struct_if_stmt ::= IF LPAREN full_bool_exp RPAREN THEN BEGIN stmt_list END SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poorly_struct_if_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // poorly_struct_if_stmt ::= IF LPAREN full_bool_exp RPAREN THEN well_struct_if_stmt ELSE poorly_struct_if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poorly_struct_if_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // poorly_struct_if_stmt ::= IF LPAREN full_bool_exp RPAREN THEN stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poorly_struct_if_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // well_struct_if_stmt ::= no_if_stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("well_struct_if_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // well_struct_if_stmt ::= IF LPAREN full_bool_exp RPAREN THEN BEGIN stmt_list END SEMICOLON ELSE BEGIN stmt_list END SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("well_struct_if_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // well_struct_if_stmt ::= IF LPAREN full_bool_exp RPAREN THEN well_struct_if_stmt ELSE BEGIN stmt_list END SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("well_struct_if_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // well_struct_if_stmt ::= IF LPAREN full_bool_exp RPAREN THEN BEGIN stmt_list END SEMICOLON ELSE well_struct_if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("well_struct_if_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // well_struct_if_stmt ::= IF LPAREN full_bool_exp RPAREN THEN well_struct_if_stmt ELSE well_struct_if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("well_struct_if_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // stmt ::= poorly_struct_if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // stmt ::= well_struct_if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assig_stmt ::= ID ASSIGN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assig_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // no_if_stmt ::= write_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("no_if_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // no_if_stmt ::= repeat_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("no_if_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // no_if_stmt ::= fun_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("no_if_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // no_if_stmt ::= assig_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("no_if_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmt_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmt_list ::= stmt stmt_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // values_list ::= expresion COMMA values_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("values_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // values_list ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("values_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // fun_call ::= ID LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // fun_call ::= ID LPAREN values_list RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_call",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bool_lit ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_lit",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bool_lit ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_lit",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type_name ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_name",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type_name ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_name",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type_name ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_name",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // args ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // args ::= ids_list COLON type_name 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // args ::= ids_list COLON type_name SEMICOLON args 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // fun ::= FUNCTION ID LPAREN args RPAREN COLON type_name SEMICOLON declarations BEGIN stmt_list END SEMICOLON subprog_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // procedures ::= PROCEDURE ID LPAREN args RPAREN SEMICOLON declarations BEGIN stmt_list END SEMICOLON subprog_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedures",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // subprog_decl ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprog_decl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // subprog_decl ::= fun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprog_decl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // subprog_decl ::= procedures 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprog_decl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ids_list ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ids_list ::= ID COMMA ids_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // vars ::= ids_list COLON type_name SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // vars ::= ids_list COLON type_name SEMICOLON vars 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_decl ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // var_decl ::= VAR vars 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // endpoints ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("endpoints",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // endpoints ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("endpoints",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // types ::= ID EQUALS SET OF endpoints DOTDOT endpoints SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // types ::= ID EQUALS SET OF endpoints DOTDOT endpoints SEMICOLON types 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // types_decl ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("types_decl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // types_decl ::= TYPE types 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("types_decl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // simb_const ::= ID EQUALS INT SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simb_const",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // simb_const ::= ID EQUALS INT SEMICOLON simb_const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simb_const",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // simb_const ::= ID EQUALS bool_lit SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simb_const",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // simb_const ::= ID EQUALS bool_lit SEMICOLON simb_const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simb_const",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // simb_const_decl ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simb_const_decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // simb_const_decl ::= CONST simb_const 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simb_const_decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // body ::= BEGIN stmt_list END DOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declarations ::= simb_const_decl types_decl var_decl subprog_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= PROGRAM ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= header declarations body 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   		
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

